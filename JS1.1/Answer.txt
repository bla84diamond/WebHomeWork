1. В чем разница между var и let?

	В JavaScript переменные могут быть объявлены с помощью ключевых слов var и let. Они имеют некоторые различия в поведении.

	1. Область видимости: переменная, объявленная с помощью var, имеет функциональную область видимости, тогда как переменная, объявленная с помощью let, имеет блочную область видимости. Это означает, что переменная, объявленная с помощью var, доступна внутри функции, в которой она объявлена, а переменная, объявленная с помощью let, доступна только внутри блока, в котором она объявлена.

	2. Изменяемость: переменная, объявленная с помощью var, может быть переопределена в любом месте функции, в которой она объявлена, тогда как переменная, объявленная с помощью let, может быть переопределена только внутри блока, в котором она объявлена.

	3. Использование до объявления: переменная, объявленная с помощью var, может быть использована до ее объявления, тогда как переменная, объявленная с помощью let, не может быть использована до ее объявления.

	4. Объявление в цикле: переменная, объявленная с помощью var, имеет область видимости внутри всей функции, даже если она была объявлена в цикле, тогда как переменная, объявленная с помощью let, имеет область видимости только внутри блока цикла. Это может привести к ошибкам, связанным с изменением переменной в цикле.

	В целом, если есть возможность использовать let вместо var, это может помочь избежать ошибок и упростить код.


2. Какие типы данных в Java Script вы знаете?

	В JavaScript есть несколько типов данных:

	1. Числа (Numbers) - представляются как целые числа, так и числа с плавающей запятой.

	2. Строки (Strings) - представляются последовательностью символов, заключенных в кавычки (одинарные или двойные).

	3. Булевы значения (Booleans) - представляют логические значения true (истина) и false (ложь).

	4. null - это специальное значение, которое означает отсутствие значения.

	5. undefined - это значение, которое указывает на то, что переменная не имеет значения.

	6. Объекты (Objects) - представляют собой коллекцию свойств и методов.

	7. Массивы (Arrays) - представляют собой упорядоченную коллекцию элементов.

	8. Функции (Functions) - представляют собой блок кода, который может быть вызван из другого места в программе.

	9. Символы (Symbols) - это новый тип данных, добавленный в ECMAScript 6, который представляет уникальный идентификатор.

	10. BigInt - это новый тип данных, добавленный в ECMAScript 2020, который представляет целые числа произвольной длины.

3. В каком типе сохраняется переменная, полученная с помощью команды prompt?

	Переменная, полученная с помощью команды prompt в JavaScript, сохраняется как строка (тип данных String). Независимо от того, какой тип данных был введен пользователем, команда prompt всегда возвращает строку. Если вам нужно сохранить значение, полученное с помощью команды prompt, как число, вам нужно будет явно привести его к числовому типу данных, используя parseInt() или parseFloat(). Например:


	let ageString = prompt("Введите ваш возраст");
	let ageNumber = parseInt(ageString);


	В этом примере значение, полученное с помощью команды prompt, сохраняется как строка в переменной ageString, а затем преобразуется в число и сохраняется в переменной ageNumber с помощью parseInt().