1.	В чем отличие строкового типа от символьного?
Строковый тип данных представляет собой последовательность символов, которые могут быть буквами, цифрами, знаками препинания и другими символами. Строки могут быть любой длины и могут содержать любые символы Unicode.

Символьный тип данных представляет собой одиночный символ, который может быть любым символом Unicode. Он представлен в виде символа в кавычках одинарных или двойных, например `'a'` или `"b"`.

Основное отличие между строковым и символьным типом данных заключается в том, что строка может содержать любое количество символов, в то время как символьный тип данных представляет только один символ.

Кроме того, для работы со строками доступны различные методы, такие как `length`, `charAt`, `substring`, `indexOf` и другие, которые позволяют манипулировать строками и извлекать из них информацию. Для символов такие методы не доступны, так как символьный тип данных представляет только один символ.

В некоторых языках программирования, таких как Java, символьный тип данных используется для представления символов Unicode, а строковый тип данных используется для представления последовательности символов Unicode. В JavaScript, однако, символьный тип данных был добавлен в ECMAScript 6 (ES6) в 2015 году, чтобы представлять отдельные символы Unicode.


2.	Как вывести символьное значение в цикле? 
В JavaScript символьные значения могут быть выведены в цикле с помощью цикла `for...of`. Вот пример:

const str = 'hello';

for (const char of str) {
  console.log(char);
}

В этом примере мы создали строку `str` со значением `'hello'`. Затем мы использовали цикл `for...of`, чтобы перебрать каждый символ в строке. В теле цикла мы использовали `console.log` для вывода каждого символа в консоль.

Также можно использовать метод `charAt` для получения символа по его индексу в строке. Вот пример:

const str = 'hello';

for (let i = 0; i < str.length; i++) {
  console.log(str.charAt(i));
}

В этом примере мы использовали цикл `for` для перебора каждого индекса в строке `str`. Внутри цикла мы использовали метод `charAt` для получения символа по его индексу и вывода его в консоль с помощью `console.log`